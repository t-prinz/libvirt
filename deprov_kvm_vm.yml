---
- name: Delete VM
  hosts: "{{ target_host | default('NO_HOSTS')}}"
  become: true
  vars:
    kvm_vm_name: null
#    vm_fq_hostname: "newhost.aeronet.io"

  tasks:

    - name: Fail playbook if VM is not specified
      fail:
        msg: "Must define the VM to delete with the variable kvm_vm_name"
      when: not kvm_vm_name

    - name: Get list of VM's
      virt:
        command: list_vms
      register: vm_list

    - name: Print list of VM's
      debug:
        var: vm_list

    - name: Fail playbook if VM not found
      fail:
        msg: "VM {{ kvm_vm_name }} not found"
      when: kvm_vm_name not in vm_list.list_vms

    - name: Get list of snapshots
      command: "virsh snapshot-list --name {{ kvm_vm_name }}"
      register: snap_list

    - name: Print
      debug:
        var: snap_list.stdout_lines
      when: snap_list.stdout_lines

    - name: Delete all snapshots
      command: "virsh snapshot-delete {{ kvm_vm_name }} {{ item }}"
      with_items: "{{ snap_list.stdout_lines }}"
      when: snap_list.stdout_lines

    - name: Ensure VM is powered off
      virt:
        name: "{{ kvm_vm_name }}"
        state: destroyed

    - name: Get list of all non-"cdrom" storage
      shell: "virsh domblklist {{ kvm_vm_name }} --details | grep -v '^T' | grep -v '^-' | awk '{if ($1==\"file\" && $2 != \"cdrom\") print $4}'"
      register: storage_list

    - name: Print
      debug:
        var: storage_list

    - name: Print list of files to delete
      debug:
        msg: "will delete {{ item }}"
      with_items: "{{ storage_list.stdout_lines }}"

    - name: Delete VM
      virt:
        name: "{{ kvm_vm_name }}"
        command: undefine

    - name: Delete all non-"cdrom" storage
      file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ storage_list.stdout_lines }}"
